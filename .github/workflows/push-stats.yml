name: Estatísticas do Push (data, usuário, contagem de HTML/CSS/JS)

on:
  push:
    branches: [ "main" ]   # ajuste se quiser outra branch
  workflow_dispatch:        # permite rodar manualmente

jobs:
  push-stats:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout com histórico suficiente para comparar o push
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # precisamos do commit anterior para comparar

      # 2) Step: Data/Hora (UTC e local)
      - name: Data e hora
        id: data
        run: |
          DT_UTC="$(date -u '+%d/%m/%Y %H:%M:%S UTC')"
          DT_LOCAL="$(date '+%d/%m/%Y %H:%M:%S %Z')"
          echo "Data/Hora (UTC):   $DT_UTC"
          echo "Data/Hora (Local): $DT_LOCAL"
          echo "dt_utc=$DT_UTC"       >> "$GITHUB_OUTPUT"
          echo "dt_local=$DT_LOCAL"   >> "$GITHUB_OUTPUT"

      # 3) Step: Usuário do push
      - name: Usuário do push
        id: usuario
        run: |
          echo "Usuário (actor): $GITHUB_ACTOR"
          echo "actor=$GITHUB_ACTOR" >> "$GITHUB_OUTPUT" 

     - name: Arquivos alterados neste push
        id: changed
        shell: bash
        run: |
          set -u

          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"

          # Se for primeiro push (before zerado) ou inválido, calcula um base seguro
          if [[ -z "${BEFORE}" || "${BEFORE}" =~ ^0{40}$ ]]; then
            echo "Primeiro push ou 'before' inválido; usando merge-base com a branch padrão."
            BASE="$(git merge-base HEAD HEAD~1 2>/dev/null || true)"
            if [[ -z "${BASE}" ]]; then
              # repo com 1 commit apenas
              git ls-files > /tmp/changed_files.txt
            else
              git diff --name-only "${BASE}" "${AFTER}" > /tmp/changed_files.txt
            fi
          else
            echo "Comparando ${BEFORE}..${AFTER}"
            git diff --name-only "${BEFORE}" "${AFTER}" > /tmp/changed_files.txt
          fi

          echo "Arquivos alterados:"
          cat /tmp/changed_files.txt || true

          # Contagens por extensão usando awk (não falha quando não há matches)
          COUNT_HTML=$(awk 'BEGIN{IGNORECASE=1} /\.html?$/ {c++} END{print c+0}' /tmp/changed_files.txt)
          COUNT_CSS=$(awk  'BEGIN{IGNORECASE=1} /\.css$/   {c++} END{print c+0}' /tmp/changed_files.txt)
          COUNT_JS=$(awk   'BEGIN{IGNORECASE=1} /\.m?js$/  {c++} END{print c+0}' /tmp/changed_files.txt)

          echo "HTML: $COUNT_HTML | CSS: $COUNT_CSS | JS: $COUNT_JS"

          echo "html=$COUNT_HTML" >> "$GITHUB_OUTPUT"
          echo "css=$COUNT_CSS"   >> "$GITHUB_OUTPUT"
          echo "js=$COUNT_JS"     >> "$GITHUB_OUTPUT"

